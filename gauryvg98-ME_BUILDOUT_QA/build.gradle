
import java.time.Duration

/*
 *
 *  * Copyright (c) Crio.Do 2019. All rights reserved
 *
 */

//////////////////////////////// DO NOT CHANGE THIS FILE //////////////////////////////////
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'jacoco'
    id 'java'
}


ext {
    buildId = System.currentTimeMillis()
}


// You are free to add new properites here as per your requirements.

ext {
    springBootVersion = "2.1.4.RELEASE"
    junitVersion = "5.3.1"
    junitPlatformLauncherVersion = "1.3.1"
    mockitoVersion = "2.22.0"
    swaggerVersion = "2.9.2"
    lombokVersion = "1.18.4"
    modelMapperVersion = "2.3.2"
    jacksonVersion = "2.9.8"
}



apply plugin: "idea"
apply plugin: "checkstyle"


version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, "__CRIO__/pre-push")
    into { new File(rootProject.rootDir, ".git/hooks") }
    fileMode 0777
}

checkstyle {
    toolVersion "7.8.1"
    configFile file("${rootProject.rootDir}/__CRIO__/checkstyle.xml")
}

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("${rootProject.rootDir}/build/reports/jacco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        //xml.destination file("${rootProject.projectDir}/customJacocoReportDir/jacocoXml")
        xml.destination file("${jacoco.reportsDir}/jacocoXml")
    }
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

// allprojects {
//     buildDir = '/tmp/external_build'
//     tasks.withType(com.github.spotbugs.SpotBugsTask) {
//         reports {
//             html.enabled true
//             xml.enabled false
//         }
//     }
// }

subprojects {
    apply plugin: "java-library"
    apply plugin: "idea"
    apply plugin: "checkstyle"
    apply plugin: "pmd"
    apply plugin: "jacoco"

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        reports {
            junitXml.enabled = true
            def destinationDirectory = System.getProperty("user.home") + "/.gradle/daemon/${buildId}/test-results"
            junitXml.destination = file(destinationDirectory)
            html.enabled = true
        }
        useJUnitPlatform {
        }
        testLogging.events ("STANDARD_ERROR")
        testLogging.events ("STANDARD_OUT")
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTEST RESULT: ${result.resultType}"
                println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
                        "${result.successfulTestCount} SUCCEEDED, " +
                        "${result.failedTestCount} FAILED, " +
                        "${result.skippedTestCount} SKIPPED"
            }
        }
        timeout = Duration.ofMinutes(15)
        jacoco {
            enabled = true
            destinationFile = file("$buildDir/jacoco/${name}.exec")
            includes = []
            excludes = []
            excludeClassLoaders = []
            includeNoLocationClasses = false
            sessionId = "<auto-generated value>"
            dumpOnExit = true
            classDumpDir = null
            output = JacocoTaskExtension.Output.FILE
            address = "localhost"
            port = 6300
            jmx = false
        }
    }

    checkstyle {
        toolVersion "7.8.1"
        configFile file("${rootProject.projectDir}/__CRIO__/checkstyle.xml")
    }

    pmd {
        toolVersion = "6.10.0"
        sourceSets = [sourceSets.main]
        ruleSetFiles = files("${rootProject.projectDir}/__CRIO__/ruleset.xml")
        ignoreFailures = true
    }

    // tasks.withType(com.github.spotbugs.SpotBugsTask) {
    //     reports {
    //         html.enabled true
    //         xml.enabled false
    //     }
    // }

    jacoco {
        toolVersion = "0.7.1.201405082137"
        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    task installGitHooks(type: Copy) {
        from new File(rootProject.rootDir, '__CRIO__/pre-push')
        into { new File(rootProject.rootDir, '.git/hooks') }
        fileMode 0777
    }

    jacocoTestCoverageVerification {
        dependsOn test
        violationRules {
            rule {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.40
                }
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 0.40
                }
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 0.40
                }
            }
        }
    }

    build.dependsOn installGitHooks
}

//////////////////////////////// DO NOT CHANGE THIS FILE //////////////////////////////////
